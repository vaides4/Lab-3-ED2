#include <Arduino.h>

portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

//leds timer
#define LED1_t 23
#define LED2_t 22
#define LED3_t 21
#define LED4_t 19

//leds contador
#define LED1_c 5
#define LED2_c 4
#define LED3_c 2
#define LED4_c 15

//alarma buzzer
#define LED_alarma 18


//contador
volatile uint8_t contador;
volatile uint8_t contador_timer;

//Variables Globales
hw_timer_t *timer = NULL;

//prototipo de funcion
void initTimer(void);

//timer
void IRAM_ATTR timer_ISR(void){
  contador_timer++;
  if(contador_timer > 15){
    contador_timer = 0;
  }
  
}

// arreglos botones
struct Boton1{
  const uint8_t BOT_inc;
  bool pressed;
};
Boton1 incrementar = {13, false};

struct Boton2{
  const uint8_t BOT_dec;
  bool pressed;
};
Boton2 decrementar = {35, false};

struct Boton3{
  const uint8_t BOT_reset;
  bool pressed;
};

Boton3 resetear = {32, false};

//variables de hadle interrupcion
void IRAM_ATTR handle_inc(){
  portENTER_CRITICAL_ISR(&mux);
  incrementar.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

void IRAM_ATTR handle_dec(){
  portENTER_CRITICAL_ISR(&mux);
  decrementar.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

void IRAM_ATTR handle_reset(){
  portENTER_CRITICAL_ISR(&mux);
  resetear.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

void setup() {
  Serial.begin(115200);
  //salidas leds timer
  pinMode(LED1_t, OUTPUT);
  pinMode(LED2_t, OUTPUT);
  pinMode(LED3_t, OUTPUT);
  pinMode(LED4_t, OUTPUT);

  //salidas leds contador
  pinMode(LED1_c, OUTPUT);
  pinMode(LED2_c, OUTPUT);
  pinMode(LED3_c, OUTPUT);
  pinMode(LED4_c, OUTPUT);

  //salida led alarma
  pinMode(LED_alarma, OUTPUT);

  //entradas botones
  pinMode(incrementar.BOT_inc, INPUT_PULLUP);
  attachInterrupt(incrementar.BOT_inc, handle_inc, FALLING);
  pinMode(decrementar.BOT_dec, INPUT_PULLUP);
  attachInterrupt(decrementar.BOT_dec, handle_dec, FALLING);
  pinMode(resetear.BOT_reset, INPUT_PULLUP);
  attachInterrupt(resetear.BOT_reset, handle_reset, FALLING);

  //estado inicial
  digitalWrite(LED1_t, LOW);
  digitalWrite(LED2_t, LOW);
  digitalWrite(LED3_t, LOW);
  digitalWrite(LED4_t, LOW);
  digitalWrite(LED1_c, LOW);
  digitalWrite(LED2_c, LOW);
  digitalWrite(LED3_c, LOW);
  digitalWrite(LED4_c, LOW);
  digitalWrite(LED_alarma, LOW);

  initTimer();

}

void loop() {
  if(incrementar.pressed){
    incrementar.pressed = false;
    contador ++;
    if (contador > 15) {
    contador = 0;
    }
  } 

  if(decrementar.pressed){
    decrementar.pressed = false;
    contador --;
  }

  if(resetear.pressed){
    resetear.pressed = false;
    contador_timer = 0;
  }

  if (contador_timer == contador) {
    contador_timer = 0;
    digitalWrite(LED_alarma, HIGH);
    delay(1000);
    digitalWrite(LED_alarma, LOW);
  }
  Serial.print(contador_timer);Serial.print(" / ");
  Serial.println(contador);
  
  switch (contador_timer) {
      case 0:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, LOW);
        break;
      case 1:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, LOW);
        break;
      case 2:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, LOW);
        break;
      case 3:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, LOW);
        break;
      case 4:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, LOW);
        break;
      case 5:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, LOW);
        break;
      case 6:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, LOW);
        break;
      case 7:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, LOW);
        break;
      case 8:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, HIGH);
        break;
      case 9:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, HIGH);
        break;
      case 10:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, HIGH);
        break;
      case 11:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, LOW);
        digitalWrite(LED4_t, HIGH);
        break;
      case 12:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, HIGH);
        break;
      case 13:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, LOW);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, HIGH);
        break;
      case 14:
        digitalWrite(LED1_t, LOW);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, HIGH);
        break;
      case 15:
        digitalWrite(LED1_t, HIGH);
        digitalWrite(LED2_t, HIGH);
        digitalWrite(LED3_t, HIGH);
        digitalWrite(LED4_t, HIGH);
        break;
}
delay(25);
switch (contador) {
      case 0:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, LOW);
        break;
      case 1:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, LOW);
        break;
      case 2:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, LOW);
        break;
      case 3:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, LOW);
        break;
      case 4:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, LOW);
        break;
      case 5:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, LOW);
        break;
      case 6:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, LOW);
        break;
      case 7:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, LOW);
        break;
      case 8:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, HIGH);
        break;
      case 9:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, HIGH);
        break;
      case 10:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, HIGH);
        break;
      case 11:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, LOW);
        digitalWrite(LED4_c, HIGH);
        break;
      case 12:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, HIGH);
        break;
      case 13:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, LOW);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, HIGH);
        break;
      case 14:
        digitalWrite(LED1_c, LOW);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, HIGH);
        break;
      case 15:
        digitalWrite(LED1_c, HIGH);
        digitalWrite(LED2_c, HIGH);
        digitalWrite(LED3_c, HIGH);
        digitalWrite(LED4_c, HIGH);
        break;
  }
}

//Funcion para iniciar timer 0
void initTimer(void) {
  timer = timerBegin(0, 80, true);
  timerAttachInterrupt(timer, timer_ISR, true);
  timerAlarmWrite(timer, 250000, true);
  timerAlarmEnable(timer);
}
